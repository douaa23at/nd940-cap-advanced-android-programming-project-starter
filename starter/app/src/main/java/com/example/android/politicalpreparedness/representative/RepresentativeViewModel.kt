package com.example.android.politicalpreparedness.representativeimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.android.politicalpreparedness.network.models.Addressimport com.example.android.politicalpreparedness.representative.repository.RepresentativeRepositoryimport com.example.android.politicalpreparedness.utils.Eventimport kotlinx.coroutines.launchclass RepresentativeViewModel : ViewModel() {    val repository = RepresentativeRepository()    val officials = repository.representatives    val getLocation = MutableLiveData<Event<Boolean>>()    val useMyLocation = MutableLiveData<Address>()    val address = MutableLiveData<Address>()    val line1 = MutableLiveData<String>()    val line2 = MutableLiveData<String>()    val city = MutableLiveData<String>()    val state = MutableLiveData<String>()    val zip = MutableLiveData<String>()    fun getRepresentatives() {        val finalAddress = Address(                line1 = line1.value.orEmpty(),                line2 = line2.value.orEmpty(),                city = city.value.orEmpty(),                zip = zip.value.orEmpty(),                state = state.value.orEmpty()        )        viewModelScope.launch {            repository.getMyRepresentatives(finalAddress, true)        }    }    fun startLocation() {        getLocation.value = Event(true)    }}